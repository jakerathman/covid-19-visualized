{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useMedia","maxWidth","className","style","display","flexDirection","width","justifyContent","alignItems","heading","src","map","entry","index","marginBottom","alt","height","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAoDeA,EAhDH,WAcIC,IAAS,CAAEC,SAAU,UAEpC,OACC,yBACCC,UAAU,MACVC,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,MAAO,OAAQC,eAAgB,eAAgBC,WAAY,WAE9G,mDACA,yBACCL,MAAO,CACNC,QAAS,OACTC,cAAe,SACfJ,SAAU,WAzBI,CACjB,CAAEQ,QAAS,gBAAiBC,IAAK,kBACjC,CAAED,QAAS,WAAYC,IAAK,kBAC5B,CAAED,QAAS,WAAYC,IAAK,YAC5B,CAAED,QAAS,WAAYC,IAAK,YAC5B,CAAED,QAAS,uBAAwBC,IAAK,wBACxC,CAAED,QAAS,qBAAsBC,IAAK,sBACtC,CAAED,QAAS,qBAAsBC,IAAK,sBACtC,CAAED,QAAS,iBAAkBC,IAAK,kBAClC,CAAED,QAAS,YAAaC,IAAK,UAC7B,CAAED,QAAS,iBAAkBC,IAAK,mBAkBrBC,KAAI,SAACC,EAAOC,GAAR,OACd,yBAAKV,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUS,aAAc,SACrE,4BAAKF,EAAMH,SACX,yBACCC,IAAG,+EAA0EE,EAAMF,IAAhF,QACHK,IAAKH,EAAMH,QACXH,MAAO,cAKX,yBAAKH,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,MAAM,OAAQU,OAAQ,OAAQT,eAAgB,eAAgBC,WAAY,SAAUS,WAAY,cACvJ,sFACA,+EClCgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.86d322fb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport useMedia from \"use-media\";\n\nconst App = () => {\n\tconst imageData = [\n\t\t{ heading: \"Top 10 States\", src: \"top_ten_states\" },\n\t\t{ heading: \"IL Cases\", src: \"illinois_cases\" },\n\t\t{ heading: \"IA Cases\", src: \"ia_cases\" },\n\t\t{ heading: \"NY Cases\", src: \"ny_cases\" },\n\t\t{ heading: \"Positive Case Growth\", src: \"positive_case_growth\" },\n\t\t{ heading: \"Positive Cases Map\", src: \"positive_cases_map\" },\n\t\t{ heading: \"Positive Test Rate\", src: \"positive_test_rate\" },\n\t\t{ heading: \"Positive Tests\", src: \"positive_tests\" },\n\t\t{ heading: \"US Deaths\", src: \"deaths\" },\n\t\t{ heading: \"Mortality Rate\", src: \"mortality_rate\" }\n\t];\n\n\tconst mobile = useMedia({ maxWidth: \"768px\" });\n\n\treturn (\n\t\t<div\n\t\t\tclassName='App'\n\t\t\tstyle={{ display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"space-evenly\", alignItems: \"center\" }}\n\t\t>\n\t\t\t<h1>Covid-19 Visualized</h1>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tflexDirection: \"column\",\n\t\t\t\t\tmaxWidth: \"1024px\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{imageData.map((entry, index) => (\n\t\t\t\t\t<div style={{ display: \"flex\", flexDirection: \"column\", marginBottom: \"64px\" }}>\n\t\t\t\t\t\t<h2>{entry.heading}</h2>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={`https://raw.githubusercontent.com/joelsewhere/covid-19/master/images/${entry.src}.png`}\n\t\t\t\t\t\t\talt={entry.heading}\n\t\t\t\t\t\t\twidth={\"100%\"}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div style={{ display: \"flex\", flexDirection: \"column\", width:\"100%\", height: \"96px\", justifyContent: \"space-evenly\", alignItems: \"center\", background: \"lightgrey\" }}>\n\t\t\t\t<div>Data assembly / visualization created by Joel Collins</div>\n\t\t\t\t<div>ReactJS Application created by Jake Rathman</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}